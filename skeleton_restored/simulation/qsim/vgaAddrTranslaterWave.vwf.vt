// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/21/2020 21:38:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          vgaAddrTranslater
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vgaAddrTranslater_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [18:0] ADDR;
// wires                                               
wire [9:0] x;
wire [9:0] y;

// assign statements (if any)                          
vgaAddrTranslater i1 (
// port map - connection between master ports and signals/registers   
	.ADDR(ADDR),
	.x(x),
	.y(y)
);
initial 
begin 
#1000000 $finish;
end 
// ADDR[ 18 ]
initial
begin
	ADDR[18] = 1'b0;
end 
// ADDR[ 17 ]
initial
begin
	ADDR[17] = 1'b0;
end 
// ADDR[ 16 ]
initial
begin
	ADDR[16] = 1'b0;
end 
// ADDR[ 15 ]
initial
begin
	ADDR[15] = 1'b0;
end 
// ADDR[ 14 ]
initial
begin
	ADDR[14] = 1'b0;
end 
// ADDR[ 13 ]
initial
begin
	ADDR[13] = 1'b0;
end 
// ADDR[ 12 ]
initial
begin
	ADDR[12] = 1'b0;
end 
// ADDR[ 11 ]
initial
begin
	ADDR[11] = 1'b0;
end 
// ADDR[ 10 ]
initial
begin
	ADDR[10] = 1'b0;
end 
// ADDR[ 9 ]
initial
begin
	ADDR[9] = 1'b0;
	ADDR[9] = #30000 1'b1;
	ADDR[9] = #60000 1'b0;
	ADDR[9] = #80000 1'b1;
	ADDR[9] = #40000 1'b0;
end 
// ADDR[ 8 ]
initial
begin
	ADDR[8] = 1'b0;
end 
// ADDR[ 7 ]
initial
begin
	ADDR[7] = 1'b0;
	ADDR[7] = #30000 1'b1;
	ADDR[7] = #60000 1'b0;
	ADDR[7] = #80000 1'b1;
	ADDR[7] = #40000 1'b0;
end 
// ADDR[ 6 ]
initial
begin
	ADDR[6] = 1'b0;
	ADDR[6] = #170000 1'b1;
	ADDR[6] = #40000 1'b0;
end 
// ADDR[ 5 ]
initial
begin
	ADDR[5] = 1'b0;
	ADDR[5] = #100000 1'b1;
	ADDR[5] = #50000 1'b0;
end 
// ADDR[ 4 ]
initial
begin
	ADDR[4] = 1'b0;
	ADDR[4] = #170000 1'b1;
	ADDR[4] = #40000 1'b0;
end 
// ADDR[ 3 ]
initial
begin
	ADDR[3] = 1'b0;
	ADDR[3] = #100000 1'b1;
	ADDR[3] = #50000 1'b0;
end 
// ADDR[ 2 ]
initial
begin
	ADDR[2] = 1'b0;
end 
// ADDR[ 1 ]
initial
begin
	ADDR[1] = 1'b0;
	ADDR[1] = #100000 1'b1;
	ADDR[1] = #50000 1'b0;
end 
// ADDR[ 0 ]
initial
begin
	ADDR[0] = 1'b0;
	ADDR[0] = #100000 1'b1;
	ADDR[0] = #50000 1'b0;
end 
endmodule

